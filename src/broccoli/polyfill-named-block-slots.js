const path = require('path');
const fs = require('fs');
const Filter = require('broccoli-caching-writer');
const lib = require('../polyfill-named-block-slots');
const mkdirp = require('mkdirp')

function PolyfillNamedBlockSlots(inputTree, _options) {
  if (!(this instanceof PolyfillNamedBlockSlots)) {
    return new PolyfillNamedBlockSlots(inputTree, _options);
  }

  var options = _options || {};
  options.persistentOutput = false;
  options.cacheInclude = [/.*\.handlebars$/, /.*\.hbs$/];

  Filter.call(this, [inputTree], options); // this._super()

  this.options = options || {};
  this.inputTree = inputTree;
}

PolyfillNamedBlockSlots.prototype = Object.create(Filter.prototype);
PolyfillNamedBlockSlots.prototype.constructor = PolyfillNamedBlockSlots;

PolyfillNamedBlockSlots.prototype.baseDir = function() {
  return path.resolve(__dirname, '../../');
};

PolyfillNamedBlockSlots.prototype.build = function() {
  var inputPath = this.inputPaths[0];
  var files = this.listEntries();
  for (let file of files) {
    let contents = fs.readFileSync(file.fullPath);
    let data = lib.transformTemplate(contents.toString(), file.relativePath);

    let fullOutputPath = this.outputPath + "/" + file.relativePath;
    let outputDir = path.dirname(fullOutputPath)
    mkdirp.sync(outputDir);
    fs.writeFileSync(fullOutputPath, data.templateString);

    if (data.lambdaTemplates.length > 0) {
      let rootIndex = file.relativePath.indexOf('/templates/');
      if (rootIndex === 1) {
        throw new Error("Couldn't figure out where to install anonymous lambda templates for " + file.relativePath);
      }

      let installDir = this.outputPath + "/" + file.relativePath.substring(0, rootIndex) + "/";
      let templateDir = installDir + "templates/components";
      let componentDir = installDir + "components";
      mkdirp.sync(templateDir);
      mkdirp.sync(componentDir);

      /*
      let invalidBlockParams = lambdaTemplate.blockParams.slice(1).map(bp => `
        ${bp}: Ember.computed(function() { 
           throw new Error("The lambda template syntax only blah blah wasting time");
         }),
      `)
      */

      for (let lambdaTemplate of data.lambdaTemplates) {
        let jsContent = `
          // This file was auto-generated by the lambda template RFC polyfill
          import Ember from 'ember';
          export default Ember.Component.extend({
            tagName: '',
            ${lambdaTemplate.blockParams[0]}: Ember.computed(function(key) { console.log("WOOT " + key); return this; }),
          });`;

        fs.writeFileSync(`${componentDir}/${lambdaTemplate.name}.js`, jsContent);
        fs.writeFileSync(`${templateDir}/${lambdaTemplate.name}.hbs`, lambdaTemplate.templateString);
      }
    }
  }
};

module.exports = PolyfillNamedBlockSlots;
